Use of const keyword
Difference between #define and const
Logical Operators
Bitwise Operators
Nested if
Ladder if-else
Character Handling
char type and ASCII values
Using ++ and -- with characters
Input/output using %c
Convert lowercase to uppercase and vice versa
Character comparison
switch Statement in C
Fall-Through Behavior
introduction to array
-------------------------------------------------------------------


1. Use of const Keyword
const is used to define constant values (read-only variables).

Once assigned, the value cannot be changed.
const int pi = 3.14;


#include <stdio.h>
int main() {
    const int max = 100;
    printf("%d", max);
    // max = 200; // Error: cannot modify a const
    return 0;
}
----------------------------------------------------------------

2. Difference Between #define and const
Aspect		#define				const
Type Checking	No				Yes
Scope		Global				Local or Global
Debugging	Hard (no type info)		Easy (type info)
Memory		No memory allocated		Memory allocated
Syntax		#define PI 3.14			const float PI = 3.14;
-----------------------------------------
#define â€“ Preprocessor Directive
It is used to define constant literals or macros.

The compiler replaces every occurrence of the macro with its value before compilation.

#include <stdio.h>
#define PI 3.14159

int main() {
    float r = 2;
    printf("Area = %f", PI * r * r);
    return 0;
}

-----------------------------------------
const â€“ Constant Variable
Declares a read-only variable with a type.

Checked by the compiler for type safety and syntax.

#include <stdio.h>
int main() {
    const float PI = 3.14159;
    float r = 2;
    printf("Area = %f", PI * r * r);
    return 0;
}


-------------------------------------------------------------

3. Logical Operators
Used in conditional statements (if, while, etc.) to combine conditions.

Operator	Meaning	Example	Result
&&	Logical AND	a > 0 && b > 0	True only if both are true
`	Logical OR
!	Logical NOT	!(a > 0)	Negates the condition


4. Bitwise Operators
Operate on bits of data.

Operator	Meaning	Example
&	Bitwise AND	a & b
`	`	Bitwise OR
^	Bitwise XOR	a ^ b
~	Bitwise NOT	~a
<<	Left shift	a << 1
>>	Right shift	a >> 1


1. Bitwise AND (&)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int b = 3;   // 0011
    int result = a & b;

    printf("a & b = %d\n", result);  // Output: 1 (0001)
    return 0;
}
Explanation:

yaml
Copy
Edit
   0101  (5)
&  0011  (3)
=  0001  (1)
ðŸ”¹ 2. Bitwise OR (|)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int b = 3;   // 0011
    int result = a | b;

    printf("a | b = %d\n", result);  // Output: 7 (0111)
    return 0;
}
Explanation:

yaml
Copy
Edit
   0101  (5)
|  0011  (3)
=  0111  (7)
ðŸ”¹ 3. Bitwise XOR (^)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int b = 3;   // 0011
    int result = a ^ b;

    printf("a ^ b = %d\n", result);  // Output: 6 (0110)
    return 0;
}
Explanation:

yaml
Copy
Edit
   0101  (5)
^  0011  (3)
=  0110  (6)
ðŸ”¹ 4. Bitwise NOT (~)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int result = ~a;

    printf("~a = %d\n", result);  // Output: -6 (on 2's complement system)
    return 0;
}
Explanation (on 32-bit signed int):

yaml
Copy
Edit
~5 = -6
Binary of 5 = 0000...0101
~5 = 1111...1010 = -6
ðŸ”¹ 5. Left Shift (<<)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int result = a << 1;

    printf("a << 1 = %d\n", result);  // Output: 10 (1010)
    return 0;
}
Explanation:

bash
Copy
Edit
5 << 1 shifts all bits left by 1 bit â†’ becomes 10
ðŸ”¹ 6. Right Shift (>>)
c
Copy
Edit
#include <stdio.h>

int main() {
    int a = 5;   // 0101
    int result = a >> 1;

    printf("a >> 1 = %d\n", result);  // Output: 2 (0010)
    return 0;
}
Explanation:

csharp
Copy
Edit
5 >> 1 shifts bits right by 1 â†’ becomes 2
âœ… Summary Table
Operator	Name	Use Example	Output	Notes
&	AND	5 & 3	1	Common bits only
`	`	OR	5 | 3	7
^	XOR	5 ^ 3	6	Bits are different
~	NOT	~5	-6	Flips all bits
<<	Left Shift	5 << 1	10	Multiply by 2
>>	Right Shift	5 >> 1	2	Divide by 2 (for positives)



int a = 5, b = 3;
printf("%d", a & b); // Output: 1


 Nested if Statement
An if inside another if


if(condition1) {
    if(condition2) {
        // code
    }
}


int a = 10;
if (a > 0) {
    if (a % 2 == 0)
        printf("Positive Even");
}


Ladder if-else Statement
Used when there are multiple conditions.

if (condition1) {
    // block1
} else if (condition2) {
    // block2
} else {
    // default block
}


int marks = 85;
if (marks >= 90) {
    printf("Grade A");
} else if (marks >= 75) {
    printf("Grade B");
} else {
    printf("Grade C");
}


Character Handling in C
ðŸ”· a. char type and ASCII values
char holds a single character (1 byte).

Internally stored as ASCII integer.

char ch = 'A';
printf("%d", ch); // Output: 65


Convert lowercase to uppercase and vice versa
Use ASCII difference between Aâ€“Z and aâ€“z (difference = 32).

char ch = 'a';
ch = ch - 32; // now uppercase


Character Comparison
char ch = 'a';
if (ch >= 'A' && ch <= 'Z')
    printf("Uppercase");
else if (ch >= 'a' && ch <= 'z')
    printf("Lowercase");


switch Statement in C

Used to replace long if-else chains when comparing a single variable to constants.

switch (expression) {
    case value1: // code; break;
    case value2: // code; break;
    default:     // code;
}

char grade = 'B';
switch (grade) {
    case 'A': printf("Excellent"); break;
    case 'B': printf("Good"); break;
    default: printf("Try Harder");
}


Fall-Through Behavior in switch
If break is not used, execution continues to the next case.

int x = 2;
switch (x) {
    case 1: printf("One\n");
    case 2: printf("Two\n");
    case 3: printf("Three\n");
}
-->
Two
Three


